FROM ckan/ckan-base:2.9.10-dev


# Set up environment variables
ENV APP_DIR=/srv/app
ENV TZ=Asia/Tokyo
RUN echo ${TZ} > /etc/timezone

# Make sure both files are not exactly the same
RUN if ! [ /usr/share/zoneinfo/${TZ} -ef /etc/localtime ]; then \
        cp /usr/share/zoneinfo/${TZ} /etc/localtime ;\
    fi ;

# cron 
RUN apk add dcron
#ハーベスターを5分ごとに実行するように設定
RUN echo "*/5 * * * * ckan -c /srv/app/ckan.ini harvester run" > /etc/crontabs/ckan

#「組織」を「データフォルダ」に変更する
# Organizations=組織の日本語訳では誤解がうまれやすいのでSIP4D-CKANではデータフォルダと訳す
RUN cp ${APP_DIR}/src/ckan/ckan/i18n/ja/LC_MESSAGES/ckan.po ${APP_DIR}/src/ckan/ckan/i18n/ja/LC_MESSAGES/ckan.po.org
RUN sed -i -e "s/組織/データフォルダ/" ${APP_DIR}/src/ckan/ckan/i18n/ja/LC_MESSAGES/ckan.po
RUN cd ${APP_DIR}/src/ckan && \
    python3 setup.py compile_catalog -f --locale ja && \
    python3 setup.py develop

### Harvester ###
RUN pip3 install -e 'git+https://github.com/ckan/ckanext-harvest.git@v1.5.6#egg=ckanext-harvest' && \
    pip3 install -r ${APP_DIR}/src/ckanext-harvest/pip-requirements.txt
COPY setup/ckan_harvesting.conf /etc/supervisord.d/ckan_harvesting.conf

#pyprojをインストールする(pyprojの3.xはproj9.0以上なのでprojをソースからインストール)
RUN apk add gcc g++ cmake geos-dev sqlite sqlite-dev curl-dev
ENV SQLITE3_VERSION=3.36.0
#libTiffをソースからインストールする（projに必要）
WORKDIR /root
RUN wget https://download.osgeo.org/libtiff/tiff-4.5.1.tar.gz &&\
    tar zxvf tiff-4.5.1.tar.gz
WORKDIR /root/tiff-4.5.1
RUN ./configure &&\
    make &&\ 
    make install
#projをソースからインストールする（9.0.0以上が必要）
WORKDIR /root
RUN wget https://download.osgeo.org/proj/proj-9.2.1.tar.gz &&\
    tar zxvf proj-9.2.1.tar.gz
WORKDIR /root/proj-9.2.1/build
RUN cmake .. &&\
    cmake --build . &&\
    cmake --build . --target install
ENV PROJ_DIR=/usr/local
#pyprojをGithubからインストールする
WORKDIR ${APP_DIR}
RUN pip install git+https://github.com/pyproj4/pyproj.git@3.6.1

### Spatial ###
RUN pip3 install -e 'git+https://github.com/ckan/ckanext-spatial.git@v2.0.0#egg=ckanext-spatial'
#pyprojのインストールでエラーが出るので、ckanext-spatialに入っているrequirements.txtを使わずにインストールする
COPY setup/spatial-requirements.txt ${APP_DIR}/src/ckanext-spatial/requirements.txt
RUN pip3 install -r ${APP_DIR}/src/ckanext-spatial/requirements.txt

### sip4d ###
RUN pip3 install -e 'git+https://github.com/NIED-DIR/ckanext-sip4d.git#egg=ckanext-sip4d'
RUN pip3 install -r ${APP_DIR}/src/ckanext-sip4d/requirements.txt

COPY docker-entrypoint.d/* /docker-entrypoint.d/


# Install any extensions needed by your CKAN instance
# - Make sure to add the plugins to CKAN__PLUGINS in the .env file
# - Also make sure all extra configuration options are added to the CKAN config file (ckan.ini)
#   This can be done by creating an overriding start_ckan_dev_development.sh file:
#   (https://github.com/ckan/ckan-docker-base/blob/main/ckan-2.9/dev/setup/start_ckan_development.sh) ie: updating the 'ckan config-tool' lines
#   For more on config-tool please see https://docs.ckan.org/en/latest/maintaining/cli.html#config-tool-tool-for-editing-options-in-a-ckan-config-file
#   or using Crudini (https://github.com/pixelb/crudini) 
#
# For instance:
#
### XLoader ###
#RUN pip3 install -e 'git+https://github.com/ckan/ckanext-xloader.git@master#egg=ckanext-xloader' && \ 
#    pip3 install -r ${APP_DIR}/src/ckanext-xloader/requirements.txt && \
#    pip3 install -U requests[security]

### Harvester ###
#RUN pip3 install -e 'git+https://github.com/ckan/ckanext-harvest.git@master#egg=ckanext-harvest' && \
#    pip3 install -r ${APP_DIR}/src/ckanext-harvest/pip-requirements.txt
# will also require gather_consumer and fetch_consumer processes running (please see https://github.com/ckan/ckanext-harvest)

### Scheming ###
#RUN  pip3 install -e 'git+https://github.com/ckan/ckanext-scheming.git@master#egg=ckanext-scheming'

### Pages ###
#RUN  pip3 install -e git+https://github.com/ckan/ckanext-pages.git#egg=ckanext-pages

### DCAT ###
#RUN  pip3 install -e git+https://github.com/ckan/ckanext-dcat.git@v0.0.6#egg=ckanext-dcat && \
#     pip3 install -r https://raw.githubusercontent.com/ckan/ckanext-dcat/v0.0.6/requirements.txt

# Clone the extension(s) your are writing for your own project in the `src` folder
# to get them mounted in this image at runtime

# Apply any patches needed to CKAN core or any of the built extensions (not the
# runtime mounted ones)

COPY patches ${APP_DIR}/patches

RUN for d in $APP_DIR/patches/*; do \
        if [ -d $d ]; then \
            for f in `ls $d/*.patch | sort -g`; do \
                cd $SRC_DIR/`basename "$d"` && echo "$0: Applying patch $f to $SRC_DIR/`basename $d`"; patch -p1 < "$f" ; \
            done ; \
        fi ; \
    done